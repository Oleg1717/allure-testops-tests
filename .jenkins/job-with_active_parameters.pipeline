properties([
	parameters([
        string(defaultValue: '5', name: 'THREADS'),
        string(defaultValue: 'https://allure.autotests.cloud', name: 'BASE_URL'),
        gitParameter(branch: '',
             branchFilter: 'origin/(.*)',
             defaultValue: 'master',
             description: '',
             name: 'BRANCH_NAME',
             listSize: '3',
             quickFilterEnabled: false,
             selectedValue: 'NONE',
             sortMode: 'NONE',
             tagFilter: '*',
             type: 'PT_BRANCH',
             useRepository: 'git@github.com:Oleg1717/allure-testops-tests.git'),
        choice(choices: ['test', 'login_tests', 'jobs_tests', 'projects_tests', 'dashboards_tests'], name: 'TASK_NAME'),
        choice(choices: ['chrome', 'firefox', 'opera'], name: 'BROWSER_NAME'),
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            filterLength: 1,
            filterable: false,
            name: 'BROWSER_VERSION',
            randomName: 'choice-parameter-28281155397613',
            referencedParameters: 'BROWSER_NAME',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script: 'return ["error"]'
                ],
                script: [
                    classpath: [],
                    sandbox: false,
                    script: '''switch (BROWSER_NAME) {
                        case "chrome":
                            return ["91.0","90.0"]
                        case "firefox":
                            return ["89.0","88.0"]
                        case "opera":
                            return ["77.0","76.0"]
                        default:
                            return [""]
                    }'''
                ]
            ]
        ],
        choice(choices: ['1920x1080', '1440x900', '1280x1024', '1366x768', '1280x720', '1024x768'], name: 'BROWSER_SIZE')
    ])
])

pipeline {
    agent any
    environment{
        SELENOID_CREDS = credentials('qa-guru-selenoid-creds')
        SELENOID_DOMAIN = "selenoid.autotests.cloud"
        SELENOID_URL = "https://${SELENOID_CREDS_USR}:${SELENOID_CREDS_PSW}@${SELENOID_DOMAIN}/wd/hub/"
        VIDEO_STORAGE_URL = "https://${SELENOID_DOMAIN}/video/"
    }

    stages {
        stage('Check URLs') {
            steps {
                httpRequest url: "https://${SELENOID_DOMAIN}/status", validResponseCodes: '200'
                httpRequest "${BASE_URL}/favicon.ico", validResponseCodes: '200'
            }
        }

        stage('Source code') {
            steps {
                git branch: "${BRANCH_NAME}",
                    credentialsId: '0338b4f6-cbc3-4550-8e91-99976debed8d',
                    url: 'git@github.com:Oleg1717/allure-testops-tests.git'
            }
        }

        stage('Build') {
            steps {
                withAllureUpload(name: '${JOB_NAME} - #${BUILD_NUMBER}', projectId: '443', results: [[path: 'build/allure-results']], serverId: 'allure-server') {
                    sh "$GRADLE_HOME/bin/gradle clean ${TASK_NAME} -Dthreads=${THREADS} -Dselenoid.url=${SELENOID_URL} -Dvideo.storage.url=${VIDEO_STORAGE_URL} -Dbrowser=${BROWSER_NAME} -Dbrowser.version=${BROWSER_VERSION} -Dbrowser.size=${BROWSER_SIZE}"
                }
            }
        }
    }

    post {
        always {
            allure results: [[path: 'build/allure-results']]

            sh '''java  \\
				"-DprojectName=REG-FORM-TESTS" \\
				"-Denv=prod" \\
				"-DreportLink=${BUILD_URL}" \\
				"-Dconfig.file=$ALLURE_NOTIFICATIONS_HOME/config/ov_autotests_bot.json" \\
				-jar $ALLURE_NOTIFICATIONS_HOME/releases/allure-notifications-3.1.1.jar '''
        }
    }
}