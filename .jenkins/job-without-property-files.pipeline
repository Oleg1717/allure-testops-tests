pipeline {
    agent any

    parameters{
        string(defaultValue: '5', name: 'THREADS')
        string(defaultValue: 'https://allure.autotests.cloud', name: 'BASE_URL')
        choice(choices: ['https://selenoid.autotests.cloud', 'http://192.168.1.102:8080'], name: 'REMOTE_DRIVER_URL')
        choice(choices: ['chrome', 'firefox'], name: 'BROWSER_NAME')
        choice(choices: ['master', 'login-tests'], name: 'BRANCH_NAME')
        choice(choices: ['test', 'login_tests', 'jobs_tests', 'projects_tests', 'dashboards_tests'], name: 'TASK_NAME')
    }

    stages {
        stage('Check URLs') {
            steps {
                httpRequest "${REMOTE_DRIVER_URL}/status"
                httpRequest "${BASE_URL}/favicon.ico"
            }
        }

        stage('Source code') {
            steps {
                git branch: '$BRANCH_NAME',
                    credentialsId: '0338b4f6-cbc3-4550-8e91-99976debed8d',
                    url: 'git@github.com:Oleg1717/allure-testops-tests-my.git'
            }
        }

        stage('Build') {
            steps {
                withAllureUpload(name: '${JOB_NAME} - #${BUILD_NUMBER}', projectId: '443', results: [[path: 'build/allure-results']], serverId: 'allure-server') {
                    sh '$GRADLE_HOME/bin/gradle clean ${TASK_NAME} -Dthreads=${THREADS} -Dbrowser=${BROWSER_NAME}'
                }
            }
        }
    }

    post {
        always {
            allure results: [[path: 'build/allure-results']]

            sh '''java  \\
				"-DprojectName=REG-FORM-TESTS" \\
				"-Denv=prod" \\
				"-DreportLink=${BUILD_URL}" \\
				"-Dconfig.file=$ALLURE_NOTIFICATIONS_HOME/config/ov_autotests_bot.json" \\
				-jar $ALLURE_NOTIFICATIONS_HOME/releases/allure-notifications-3.1.1.jar '''
        }
    }
}