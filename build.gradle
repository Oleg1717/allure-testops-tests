plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.9.6'
    id "io.freefair.lombok" version "6.0.0-m2"
}

repositories {
    mavenCentral()
}

def allureVersion = "2.17.2",
    selenideVersion = '6.3.0',
    junitVersion = "5.8.2",
    jacksonVersion = "2.13.1"

allure {
    report {
        version = allureVersion
    }
    adapter {
        autoconfigure = true
        aspectjweaver = true
        frameworks {
            junit5 {
                adapterVersion = allureVersion
            }
        }
    }
}

dependencies {
    testImplementation(
            'ch.qos.logback:logback-classic:1.2.10',
            "com.github.javafaker:javafaker:1.0.2",
            "org.aeonbits.owner:owner:1.0.12",
            "org.assertj:assertj-core:3.22.0",
            "io.rest-assured:rest-assured:4.5.0",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-junit5:$allureVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
            "com.codeborne:selenide:$selenideVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion")
    testRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task login_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'login'
    }
}

task jobs_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'jobs'
    }
}

task projects_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'projects'
    }
}

task dashboards_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'dashboards'
    }
}

task positive_only(type: Test) {
    useJUnitPlatform {
        includeTags 'positive_only'
    }
}

task positive_negative(type: Test) {
    useJUnitPlatform {
        includeTags 'positive_negative'
    }
}